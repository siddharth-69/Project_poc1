{"version":3,"sources":["components/SearchBar.js","components/ImageDisplay.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","searchTerm","handleChange","event","setState","target","value","handleSubmit","onFormSubmit","props","preventDefault","Paper","elevation","style","padding","onSubmit","this","TextField","fullWidth","label","onChange","Component","ImageDisplay","movies","all_movies","filter","i","Poster","map","file","marginLeft","marginRight","marginBottom","marginTop","src","Grid","container","spacing","App","Movies","a","axios","get","response","data","Search","justifyContent","item","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kUAoCeA,EAjCf,4MACIC,MAAM,CACFC,WAAW,IAFnB,EAKIC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVH,WAAYE,EAAME,OAAOC,SAPrC,EAWIC,aAAe,SAACJ,IAEZK,EADuB,EAAKC,MAArBD,cACM,EAAKR,MAAMC,YACxBE,EAAMO,kBAdd,uDAkBQ,OACI,kBAACC,EAAA,EAAD,CAAOC,UAAW,EAAGC,MAAO,CAAEC,QAAS,SACnC,0BAAMC,SAAUC,KAAKT,cACjB,kBAACU,EAAA,EAAD,CACIC,WAAS,EACTC,MAAM,2BACNb,MAAOU,KAAKhB,MAAMC,WAClBmB,SAAUJ,KAAKd,qBAzBvC,GAA+BmB,a,iBCmBhBC,G,6KAjBP,IAAKN,KAAKP,MAAMc,OACZ,OACI,uDAGR,IACMC,EADSR,KAAKP,MAAMc,OAAOE,QAAO,SAAAC,GAAC,QAAe,QAAXA,EAAEC,WACvBC,KAAI,SAACC,GAAD,OACxB,yBAAKhB,MAAO,CAAEiB,WAAY,MAAOC,YAAa,OAAQC,aAAc,OAAQC,UAAW,QAASC,IAAKL,EAAKF,YAE9G,OACI,kBAACQ,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACpBb,O,GAbUH,cC8BZiB,E,4MAvBbtC,MAAM,CACJuC,OAAQ,I,EAGVhC,a,uCAAe,WAAON,GAAP,eAAAuC,EAAA,sEACSC,IAAMC,IAAI,6CAAkDzC,GADrE,OACP0C,EADO,OAEb,EAAKvC,SAAS,CAAEmC,OAAQI,EAASC,KAAKC,SAFzB,2C,6GAMb,OACE,6BACA,kBAACV,EAAA,EAAD,CAAMtB,MAAO,CAAEiC,eAAgB,UAAYV,WAAS,EAACC,QAAS,IAC5D,kBAACF,EAAA,EAAD,CAAMY,MAAI,EAACC,GAAI,IACb,kBAAC,EAAD,CAAWxC,aAAcQ,KAAKT,iBAGlC,kBAAC,EAAD,CAAcgB,OAAQP,KAAKhB,MAAMuC,c,GAnBrBlB,aCIE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.19950c0a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {Paper, TextField} from '@material-ui/core';\n\nexport class SearchBar extends Component {\n    state={\n        searchTerm:''\n    }\n\n    handleChange = (event) =>{\n        this.setState({\n            searchTerm: event.target.value\n        })\n    }\n\n    handleSubmit = (event) =>{\n        const {onFormSubmit} = this.props\n        onFormSubmit(this.state.searchTerm)\n        event.preventDefault()\n    }\n\n    render() {\n        return (\n            <Paper elevation={6} style={{ padding: \"25px\" }}>\n                <form onSubmit={this.handleSubmit}>\n                    <TextField\n                        fullWidth\n                        label=\"Enter the movie name....\"\n                        value={this.state.searchTerm}\n                        onChange={this.handleChange}\n                    />\n                </form>\n            </Paper>\n        )\n    }\n}\n\nexport default SearchBar\n","import React, { Component } from 'react'\nimport { Grid } from '@material-ui/core';\n\nclass ImageDisplay extends Component {\n    render() {\n        if(!(this.props.movies)){\n            return(\n                <h1>Enter Something Valid!!</h1>\n            )\n        }\n        const movies = this.props.movies.filter(i=>!(i.Poster==='N/A'))\n        const all_movies=movies.map((file)=>(\n            <img style={{ marginLeft: \"5px\", marginRight: \"60px\", marginBottom: \"10px\", marginTop: \"10px\"}} src={file.Poster}/> \n        ))\n        return(\n            <Grid container spacing={4}>\n                {all_movies}\n            </Grid>\n        )\n    }\n}\n\nexport default ImageDisplay\n","import React,{Component} from 'react';\nimport { Grid } from '@material-ui/core';\nimport SearchBar from './components/SearchBar'\nimport axios from 'axios'\nimport './App.css';\nimport ImageDisplay from './components/ImageDisplay';\n\n\nclass App extends Component {\n\n  state={\n    Movies: []\n  }\n\n  handleSubmit = async (searchTerm) =>{\n    const response= await axios.get('https://www.omdbapi.com/?apiKey=df4d666'+ '&s='+ searchTerm)\n    this.setState({ Movies: response.data.Search})\n  }\n\n  render() {\n    return (\n      <div>\n      <Grid style={{ justifyContent: \"center\" }} container spacing={10}>\n        <Grid item xs={12}>\n          <SearchBar onFormSubmit={this.handleSubmit}></SearchBar>\n        </Grid>\n      </Grid>\n      <ImageDisplay movies={this.state.Movies}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}